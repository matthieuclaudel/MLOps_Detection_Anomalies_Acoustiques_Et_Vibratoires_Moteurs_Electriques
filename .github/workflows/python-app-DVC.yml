# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  setup-and-test:
    name: Setup Environment and Run Tests
    runs-on: ubuntu-latest
    steps:
    # Étape 1 : Checkout du code
    - uses: actions/checkout@v4

    # Étape 2 : Installer Python
    - name: Set up Python 3.11
      uses: actions/setup-python@v3
      with:
        python-version: "3.11"

    # Étape 3 : Installer les dépendances
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run make_dataset with secret argument.
      env:
        TOKEN_DVC: ${{ secrets.ACCESS_KEY_DVC}}
      run: |
        python src/data/make_dataset.py $TOKEN_DVC

    - name: Run build_features
      run: |
        python src/features/build_features.py

    - name: Run train_model
      run: |
        python src/models/train_model.py

    - name: Run predict_model
      run: |
        python src/models/predict_model.py
    
    # Étape 4: Exécuter les tests avec pytest
    - name: Run tests with pytest
      env:
        PYTHONPATH: ${{ github.workspace }}/src  # Ajouter src/ au chemin Python
      run: |
        pytest tests/

  run-shell-command:
    runs-on: ubuntu-latest
    needs: setup-and-test
    steps:
      - name: python commands
        run: |
          import platform
          print(platform.processor())
        shell: python
      - name: List files
        run: ls -R
  run-windows-command:
    runs-on: windows-latest
    needs: run-shell-command
    steps:
      - name: current directory with powershell
        run: Get-Location
      - name: current directory with bash
        run: pwd
        shell: bash
      - name: print some default env variables
        run: |
          echo "HOME: ${HOME}"
          echo "GITHUB_WORKFLOW: ${GITHUB_WORKFLOW}"
          echo "GITHUB_ACTION: ${GITHUB_ACTION}"
          echo "GITHUB_ACTIONS: ${GITHUB_ACTIONS}"
          echo "GITHUB_ACTOR: ${GITHUB_ACTOR}"
          echo "GITHUB_REPOSITORY: ${GITHUB_REPOSITORY}"
          echo "GITHUB_EVENT_NAME: ${GITHUB_EVENT_NAME}"
          echo "GITHUB_WORKSPACE: ${GITHUB_WORKSPACE}"
        shell: bash